
(fast-lock-cache-data 2 (quote (16979  55246)) (quote (t ("^\\(\\(\\(\\sw\\|\\s_\\|[:~*&]\\)+[ 	]+\\)\\(\\(\\(\\sw\\|\\s_\\|[:~*&]\\)+[ 	]+\\)\\(\\(\\sw\\|\\s_\\|[:~*&]\\)+[ 	]+\\)?\\)?\\)?\\([*&]+[ 	]*\\)?\\(\\(\\sw\\|\\s_\\|[:~*&]\\)+\\)[ 	]*(" (10 font-lock-function-name-face)) ("^\\(typedef[ 	]+struct\\|struct\\|static[ 	]+struct\\)[ 	]+\\(\\(\\sw\\|\\s_\\|[:~*&]\\)+\\)[ 	]*\\({\\|$\\)" (2 font-lock-function-name-face)) ("case[ 	]+\\(\\(\\sw\\|\\s_\\)+\\)[ 	]+:" (1 font-lock-keyword-face)) ("\\<\\(default\\):" (1 font-lock-keyword-face)) ("^#[ 	]*include[ 	]+\\(<[^>\"
]+>\\)" (1 font-lock-string-face)) ("^#[ 	]*define[ 	]+\\(\\(\\sw+\\)(\\)" (2 font-lock-function-name-face)) ("^#[ 	]*if\\>" ("\\<\\(defined\\)\\>[ 	]*(?\\(\\sw+\\)?" nil nil (1 font-lock-preprocessor-face) (2 font-lock-variable-name-face nil t))) ("^#[ 	]*elif\\>" ("\\<\\(defined\\)\\>[ 	]*(?\\(\\sw+\\)?" nil nil (1 font-lock-preprocessor-face) (2 font-lock-variable-name-face nil t))) ("^\\(#[ 	]*[a-z]+\\)\\>[ 	]*\\(\\sw+\\)?" (1 font-lock-preprocessor-face) (2 font-lock-variable-name-face nil t)) ("\\<\\(auto\\|c\\(har\\|onst\\)\\|double\\|e\\(num\\|xtern\\)\\|float\\|int\\|long\\|register\\|s\\(hort\\|igned\\|t\\(atic\\|ruct\\)\\)\\|typedef\\|un\\(ion\\|signed\\)\\|vo\\(id\\|latile\\)\\)\\>" (0 font-lock-type-face)) ("\\<\\(break\\|continue\\|do\\|else\\|for\\|if\\|return\\|switch\\|while\\)\\>" (0 font-lock-keyword-face)) ("\\<\\(case\\|goto\\)\\>[ 	]*\\([^ 	
:;]+\\)?" (1 font-lock-keyword-face) (2 font-lock-reference-face nil t)) ("^[ 	]*\\(\\sw+\\)[ 	]*:" (1 font-lock-reference-face)) ("\\<\\(auto\\|c\\(har\\|onst\\)\\|double\\|e\\(num\\|xtern\\)\\|float\\|int\\|long\\|register\\|s\\(hort\\|igned\\|t\\(atic\\|ruct\\)\\)\\|typedef\\|un\\(ion\\|signed\\)\\|vo\\(id\\|latile\\)\\)\\>\\([ 	*&]+\\sw+\\>\\)*" (font-lock-match-c++-style-declaration-item-and-skip-to-next (goto-char (or (match-beginning 8) (match-end 1))) (goto-char (match-end 1)) (1 (if (match-beginning 4) font-lock-function-name-face font-lock-variable-name-face)))) ("\\(}\\)[ 	*]*\\sw" (font-lock-match-c++-style-declaration-item-and-skip-to-next (goto-char (match-end 1)) nil (1 (if (match-beginning 4) font-lock-function-name-face font-lock-variable-name-face)))) ("^\\(\\sw+\\)\\>\\([ 	*]+\\sw+\\>\\)*" (1 font-lock-type-face) (font-lock-match-c++-style-declaration-item-and-skip-to-next (goto-char (or (match-beginning 2) (match-end 1))) nil (1 (if (match-beginning 4) font-lock-function-name-face font-lock-variable-name-face)))))) (quote ((font-lock-reference-face 21605 21606 21509 21510 21449 21450 9595 9596 9341 9342 9104 9105 8078 8079 7984 7985 7915 7916) (font-lock-keyword-face 25964 25970 25795 25798 25033 25036 25014 25016 24840 24842 24768 24772 24694 24697 24423 24427 24186 24188 24072 24076 23579 23581 23445 23450 23341 23343 23143 23145 22752 22754 22640 22642 22558 22562 22378 22380 22246 22249 22213 22216 22102 22104 22033 22035 21962 21964 21889 21891 21849 21854 21600 21604 21589 21594 21504 21508 21493 21498 21444 21448 21413 21419 21345 21347 21276 21278 21205 21207 21132 21134 21091 21094 21044 21048 20740 20742 19878 19880 19802 19805 19771 19774 19565 19567 19269 19273 19150 19152 17725 17728 17694 17697 17478 17482 17459 17465 17243 17245 16599 16601 16300 16303 16267 16270 16026 16028 15370 15372 15300 15304 15254 15256 15223 15226 15194 15197 14477 14482 14193 14195 14154 14158 14129 14133 13954 13956 13266 13268 12953 12958 12937 12939 12924 12928 12169 12171 12054 12056 11858 11860 11741 11743 11513 11515 10363 10368 10000 10002 9910 9912 9882 9888 9866 9873 9812 9814 9786 9790 9728 9730 9590 9594 9578 9583 9527 9529 9501 9505 9444 9446 9336 9340 9324 9329 9208 9211 9099 9103 9066 9072 8990 8992 8637 8639 8289 8294 8073 8077 8064 8069 7979 7983 7970 7975 7910 7914 7881 7887 7601 7603 7588 7592 7314 7316 7286 7288 7247 7250 7116 7118 6962 6964 6943 6945 6852 6854 6844 6849 6825 6827 6498 6503 6208 6210 6121 6123 5825 5827 5052 5054 4481 4487 4361 4363 4262 4268 4135 4137 3971 3974 3724 3727) (font-lock-variable-name-face 3485 3491 3426 3432 3063 3070 3052 3061 3022 3032 3013 3020 2957 2959 2939 2944 2920 2925 2902 2907 2895 2900 2879 2883 2862 2867 2850 2860 2828 2838 2816 2826 2796 2804 2784 2794 2768 2772 2763 2766 2750 2755 2677 2688 2667 2673 2649 2655 2639 2645 2622 2626 2604 2612 2594 2602 2579 2584 2572 2577 2565 2570 2551 2555 2545 2549 2539 2543 2525 2529 2517 2523 2500 2507 2492 2498 2481 2482 2478 2479 2475 2476 2454 2465 2443 2452 2425 2433 2414 2423 2398 2404 2382 2388 2374 2380 2368 2372 2351 2358 2343 2349 2336 2341 2328 2334 2302 2318 2287 2292 2271 2277 2257 2261 2249 2255 2235 2239 2227 2233 2212 2217 2207 2210 2191 2197 2184 2189 2179 2182 2172 2177 2161 2162 2158 2159 2147 2148 2144 2145 2141 2142 2138 2139 2122 2127 2114 2120 2095 2100 2068 2074) (font-lock-function-name-face 2045 2049) (font-lock-type-face 25516 25521 23507 23512 23473 23476 19326 19331 19293 19298 19239 19244 19207 19212 13739 13744 11954 11959 11947 11950 11627 11632 11587 11590 9975 9980 9946 9951 8814 8819 8777 8780 8689 8694 8662 8665 4087 4090 4062 4065 4036 4039 4011 4014 3958 3961 3932 3935 3904 3907 3878 3881 3837 3842 3810 3815 3788 3793 3761 3766 3709 3714 3681 3686 3659 3662 3614 3617 3591 3594 3546 3549 3478 3484 3419 3425 3356 3360 3311 3315 3252 3256 3207 3211 3140 3143 3095 3098 3038 3044 2995 3001 2950 2956 2931 2936 2913 2918 2889 2894 2873 2878 2844 2849 2810 2815 2778 2783 2744 2749 2661 2664 2633 2636 2618 2621 2590 2593 2561 2564 2535 2538 2513 2516 2488 2491 2471 2474 2439 2442 2410 2413 2394 2397 2364 2367 2324 2327 2298 2301 2283 2286 2267 2270 2245 2248 2223 2226 2203 2206 2168 2171 2154 2157 2134 2137 2109 2113 2076 2082 2050 2056 2041 2044) (font-lock-string-face 24904 24969 24870 24876 24803 24819 24657 24659 24448 24503 24222 24275 24089 24110 24059 24061 23752 23800 23651 23678 23609 23615 23409 23435 23321 23323 22877 22907 22595 22622 22488 22517 22440 22444 22410 22412 22341 22353 22290 22297 22197 22200 22161 22162 22128 22129 22094 22095 22060 22061 22025 22026 21990 21991 21954 21955 21918 21919 21641 21663 21536 21546 21476 21481 21404 21405 21371 21372 21337 21338 21303 21304 21268 21269 21233 21234 21197 21198 21161 21162 20820 20843 20676 20687 20403 20439 20252 20273 20083 20157 19984 20026 19385 19475 18839 18934 17515 17548 16516 16528 16242 16260 15703 15714 15062 15086 14246 14315 14026 14101 13869 13925 13497 13552 12631 12695 12590 12592 10073 10149 9635 9693 9381 9434 9295 9297 9267 9268 9144 9198 8867 8941 8740 8770 8470 8472 8430 8431 8325 8333 8110 8138 8016 8025 7947 7960 7174 7208 7036 7067 7001 7002 6418 6465 6030 6085 5596 5731 5542 5567 5513 5518 5420 5466 5318 5371 5231 5294 5094 5134 4938 4978 4871 4898 4820 4828 4728 4780 4661 4704 4434 4457 4400 4401 4205 4236 4171 4172 1620 1627 1600 1608 1582 1590 1563 1572) (font-lock-preprocessor-face 1610 1618 1591 1599 1573 1581 1554 1562) (font-lock-comment-face 25612 25646 25306 25330 24154 24183 23942 24033 23034 23104 22694 22748 21862 21884 21051 21083 20764 20796 19914 19960 18778 18802 18718 18770 18608 18659 17884 18600 17786 17877 16665 16953 16541 16592 16443 16489 15718 16022 14971 15032 14851 14963 14716 14747 13596 13710 13302 13365 12960 13204 12089 12162 11655 11689 10568 11510 10446 10564 10287 10357 10165 10230 9015 9060 8583 8631 6884 6941 6293 6337 6167 6197 5876 5916 4503 4640 4284 4356 4106 4130 2691 2739 1630 2039 1 1553))))
