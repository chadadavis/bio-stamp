#!/usr/bin/perl -w

#
# Prettifies alignments, can give ids to select (all = all ids)
#


$|=1;

use lib '/russell/speedy/russell/progs/stamp.4.3/perl';
use Palign;


$format{"c"} = "Clustal";
$format{"m"} = "MSF";
$format{"b"} = "AMPS BLOCK";
$format{"f"} = "FASTA";
$format{"p"} = "PIR";
$format{"s"} = "Pfam";

$from = "x"; 
$extract = "";
$doall=1;
$head=1;
$min_frac = 1.0;
$stamp_char = "G";
$stamp_cut = 6.0;
$stamp_win = 3;
$show_diff = 0;


for($i=0; $i<=$#ARGV; ++$i) {
   if($ARGV[$i] eq "-in") { # conversion specified
 	if(($i+1)>($#ARGV)) { exit_error(); }
	$from = substr($ARGV[$i+1],0,1);
	if($from !~ /[cmbfps]/) { exit_error(); }
	$i++;
   } elsif($ARGV[$i] eq "-mf") { # conversion specified
 	if(($i+1)>($#ARGV)) { exit_error(); }
	$min_frac = $ARGV[$i+1];
	$i++;
   } elsif($ARGV[$i] eq "-diff") { 
	$show_diff=1;
   } elsif($ARGV[$i] eq "-nohead") { 
	$head=0;
   } elsif(($ARGV[$i] eq "-help") || ($ARGV[$i] eq "-")) { 
	exit_error();
   } else {
	$extract .= $ARGV[$i] . " ";
	$doall = 0;
   }
}


#printf("Converting from %s to %s (stdin/stdout)\n",$format{$from},$format{$to});
# Read data

@data = read_align("-",$type);
if($from eq "x") {
    $from = $type;
}
if($from eq "x") {
   die "Couldn't figure out alignment type: please specify with \"-in <type>\"\n";
}

if($from eq "m") { 
	$align = get_msf(@data); 
} elsif($from eq "c") {
	 $align = get_clustal(@data); 
} elsif($from eq "b") {
	 $align = get_block(@data); 
} elsif($from eq "f") {
	 $align = get_fasta(@data); 
} elsif($from eq "p") {
	 $align = get_pir(@data); 
} elsif($from eq "s") {
	 $align = get_pfam(@data); 
}

if(-e "alscript.als") {
	die "Error: delete old alscript.als file, or move to a different directory\n";
}

if($head==1) {
	# Print alscript header:
	open(OUT,">alscript.als") || die "Error: couldn't write to alscript.als\n";
	print OUT "SILENT_MODE
BLOCK_FILE alscript.blc
OUTPUT_FILE alscript.ps
PORTRAIT
POINTSIZE  6.5
IDENT_WIDTH 7
DEFINE_FONT 0 Helvetica      DEFAULT 
DEFINE_FONT 1 Helvetica REL  0.75   
DEFINE_FONT 7 Helvetica REL 0.5
DEFINE_FONT 3 Helvetica-Bold DEFAULT    
DEFINE_FONT 4 Times-Bold     DEFAULT   
DEFINE_FONT 5 Helvetica-BoldOblique  DEFAULT 
DEFINE_FONT 6 Helvetica-BoldOblique  1.5 
#
DEFINE_COLOUR 1  0.0 0.0 0.0 #black
DEFINE_COLOUR 2  1.0 0.0 0.0 #red
DEFINE_COLOUR 3  0.0 1.0 0.0 #green
DEFINE_COLOUR 4  0.0 0.0 1.0 #blue
DEFINE_COLOUR 5  0.0 1.0 1.0 #cyan
DEFINE_COLOUR 6  1.0 0.0 1.0 #magenta
DEFINE_COLOUR 7  1.0 1.0 1.0 #white
DEFINE_COLOUR 8  1.0 1.0 0.0 #yellow
DEFINE_COLOUR 9  0.0 0.0 0.5 #dark-blue
DEFINE_COLOUR 10 0.0 0.5 0.5 #slate-blue
DEFINE_COLOUR 11 0.0 1.0 0.5 #aquamarine
DEFINE_COLOUR 12 0.0 0.5 1.0 #royal-blue
DEFINE_COLOUR 13 0.5 1.0 1.0 #sky-blue
DEFINE_COLOUR 14 0.0 0.5 0.0 #dark-green
DEFINE_COLOUR 15 0.5 0.5 0.0 #khaki
DEFINE_COLOUR 16 0.5 1.0 0.0 #lime-green
DEFINE_COLOUR 17 0.5 1.0 0.5 #pale-green
DEFINE_COLOUR 18 0.5 0.0 0.0 #red-brown
DEFINE_COLOUR 19 0.5 0.0 0.5 #pale-purple
DEFINE_COLOUR 20 0.5 0.0 1.0 #purple
DEFINE_COLOUR 21 0.5 0.5 1.0 #lilac
DEFINE_COLOUR 22 1.0 0.0 0.5 #dayglo-pink
DEFINE_COLOUR 23 1.0 0.5 1.0 #pink
DEFINE_COLOUR 24 0.5 0.5 0.5 #mid-grey
DEFINE_COLOUR 25 1.0 0.5 0.0 #orange
DEFINE_COLOUR 26 1.0 0.5 0.5 #flesh
DEFINE_COLOUR 27 1.0 1.0 0.5 #cream
NUMBER_INT 10
SETUP
";
}
close(OUT);
# Write block file for ALSCRIPT to read
write_block($align,"alscript.blc");



if($doall==1) {
	$extract = "";
	for($i=0; $i<$align->{nseq}; ++$i) {
		$id=$align->{list}[$i];
		$extract .= $id . " ";
	}
}

print "Relevant files are alscript.als and alscript.blc\n";
print "To generate the alignment, you need to run:\n";
print "alscript alscript.als\n";

if($show_diff==1) {
   show_diff($align,"alscript.als",$extract,$min_frac,$stamp_char,$stamp_cut,$stamp_win);
} else {
   prettify($align,"alscript.als",$extract,$min_frac,$stamp_char,$stamp_cut,$stamp_win);
}



sub exit_error {
die" format: aprettify [-in <type> -mf <0.0-1.0> -nohead ] [<string1> <string2> ... <stringN>] < (file) 
	'-in' specifies the file format (the program tries to guess if not given)
        <type> is one of:
          m = MSF format
          c = Clustal format
          b = AMPS BLOCK format
          f = FASTA format
          p = PIR format
	  s = PFAM (Sanger) format

        '-mf <float>' is the minimum fracion of positions needed 
          to define conservation.  The default is 1.0, 
          try 0.8 for a slop factor (i.e. 80% of positions)

        '-nohead' removes the ALSCRIPT header 
         (don't do this unless you understand ALSCRIPT)

        if a series of sequence identifiers are given on the command line, the program
        will restrict the conservation analysis to those specified (they must be
        in the alignment)\n";

}
